package de.tyrannus.venomhack.modules.exploit;

import de.tyrannus.venomhack.events.RenderEvent;
import de.tyrannus.venomhack.events.TickEvent;
import de.tyrannus.venomhack.modules.Module;
import de.tyrannus.venomhack.settings.Setting;
import de.tyrannus.venomhack.utils.inventory.InvUtils;
import de.tyrannus.venomhack.utils.inventory.ItemPos;
import de.tyrannus.venomhack.utils.render.RenderMode;
import de.tyrannus.venomhack.utils.render.RenderUtils;
import de.tyrannus.venomhack.utils.world.BlockUtils;
import java.awt.Color;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.util.hit.BlockHitResult;

public class AirPlace extends Module {
   private final Setting<Float> range = this.setting("range", "How far you will be able to place.", Float.valueOf(3.5F), 0.0F, 6.0F);
   private final Setting<Boolean> swing = this.setting("swing", "Whether or not to swing while placing.", Boolean.valueOf(false));
   private final Setting<RenderMode> renderMode = this.setting("render-mode", "How the block placement will be rendered.", RenderMode.BOTH);
   private final Setting<Float> lineWidth = this.setting("line-width", "The line width.", Float.valueOf(1.5F), 0.0F, 3.0F);
   private final Setting<Color> lineColor = this.setting("line-color", "The color of the line.", new Color(255, 255, 255, 100));
   private final Setting<Color> sideColor = this.setting("side-color", "The color of the side.", new Color(255, 255, 255, 60));
   private BlockHitResult hitResult;

   public AirPlace() {
      super(Module.Categories.EXPLOIT, "air-place", "Allows you to place blocks in the air.");
   }

   @EventHandler
   private void onTick(TickEvent.Pre event) {
      Item mainHand = mc.player.getMainHandStack().getItem();
      if (!(mainHand instanceof BlockItem)) {
         this.hitResult = null;
      } else {
         this.hitResult = (BlockHitResult)mc.getCameraEntity().raycast((double)this.range.get().floatValue(), 0.0F, true);
         if (mc.options.useKey.isPressed() && mc.world.getBlockState(this.hitResult.getBlockPos()).getMaterial().isReplaceable()) {
            ItemPos mainResult = InvUtils.findInHotbar(mainHand);
            this.place(mainResult);
         }
      }
   }

   @EventHandler
   private void onRender(RenderEvent.Flat event) {
      if (this.hitResult != null && mc.world.getBlockState(this.hitResult.getBlockPos()).getMaterial().isReplaceable()) {
         RenderUtils.drawBlock(this.renderMode.get(), this.hitResult.getBlockPos(), this.lineWidth.get(), this.lineColor.get(), this.sideColor.get(), false);
      }
   }

   private void place(ItemPos pos) {
      BlockUtils.justPlace(pos, this.hitResult, this.swing.get(), false, 0);
   }
}
